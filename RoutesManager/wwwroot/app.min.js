var app;class ApiController{constructor(n){this.apiBaseUrl=app.API_BASE_URL;this.eventObserver=n;this.init()}init(){this.attachEventListeners()}attachEventListeners(){this.eventObserver.subscribe(this.saveGeoLayer.bind(this),EventType.SAVE_LAYER);this.eventObserver.subscribe(this.deleteGeoLayer.bind(this),EventType.DELETE_LAYER);this.eventObserver.subscribe(this.getAreas.bind(this),EventType.MAP_LOADED);this.eventObserver.subscribe(this.saveSettings.bind(this),EventType.SAVE_SETTINGS);this.eventObserver.subscribe(this.findLocation.bind(this),EventType.FIND_LOCATION);this.eventObserver.subscribe(this.findWhat3Words.bind(this),EventType.FIND_3_WORDS);this.eventObserver.subscribe(this.suburbsSearch.bind(this),EventType.SEARCH_SUBURBS);this.eventObserver.subscribe(this.addressesSearch.bind(this),EventType.SEARCH_ADDRESSES);this.eventObserver.subscribe(this.sectionalTitleSearch.bind(this),EventType.SEARCH_SECTIONAL_TITLES);this.eventObserver.subscribe(this.getUserTags.bind(this),EventType.LOAD_USER_TAGS);this.eventObserver.subscribe(this.saveUserTags.bind(this),EventType.SAVE_TAGS);this.eventObserver.subscribe(this.saveLocation.bind(this),EventType.SAVE_LOCATION);this.eventObserver.subscribe(this.getPlaces.bind(this),EventType.MAP_LOADED)}getAreas(){var n=`${this.apiBaseUrl}/geospatial/allareas`;fetch(n,this.createRequestObject("GET",null)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{var t=[];n.forEach(n=>{t.push(new GeoLayerModel(n.Id,n.LayerName,n.Geojson,n.PublicTag,n.UserTag,n.UserId))});this.eventObserver.broadcast(EventType.LAYERS_LOADED,t)}).catch(n=>this.handleApiError(n))}saveGeoLayer(n){var t=`${this.apiBaseUrl}/geospatial/savelayer`;fetch(t,this.createRequestObject("POST",n)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{this.eventObserver.broadcast(EventType.LAYER_SAVED,new GeoLayerModel(n.Id,n.LayerName,n.Geojson,n.PublicTag,n.UserTag,n.UserId))}).catch(n=>this.handleApiError(n))}deleteGeoLayer(n){var t=`${this.apiBaseUrl}/geospatial/deletelayer`;fetch(t,this.createRequestObject("POST",n)).then(function(n){if(!n.ok)throw Error(n.statusText);}).then(()=>{this.eventObserver.broadcast(EventType.LAYER_DELETED,new GeoLayerModel(n.Id,"","",null,null))}).catch(n=>this.handleApiError(n))}saveSettings(n){var t=`${this.apiBaseUrl}/user/updatesettings`;fetch(t,this.createRequestObject("POST",n)).then(function(n){if(!n.ok)throw Error(n.statusText);}).then(()=>{this.eventObserver.broadcast(EventType.SETTINGS_SAVED,{})}).catch(n=>this.handleApiError(n))}findLocation(n){var t=`${this.apiBaseUrl}/geospatial/findlocation`;fetch(t,this.createRequestObject("POST",n)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{this.eventObserver.broadcast(EventType.PLOT_LOCATION,new GeoLocationModel(n.LocationId,n.FormattedAddress,n.Lat,n.Lng,n.What3Words,null,null))}).catch(n=>this.handleApiError(n))}findWhat3Words(n){var t=`${this.apiBaseUrl}/geospatial/findw3w`;fetch(t,this.createRequestObject("POST",n)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(t=>{n.What3Words=t.What3Words,this.eventObserver.broadcast(EventType.W3W_RETRIEVED,n)}).catch(n=>this.handleApiError(n))}suburbsSearch(n){var t=`${this.apiBaseUrl}/geospatial/findmatchingsuburbs?searchText=${n.SearchText}`;fetch(t,this.createRequestObject("GET",null)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{this.eventObserver.broadcast(EventType.SUBURBS_RETRIEVED,n)}).catch(n=>this.handleApiError(n))}addressesSearch(n){var t=`${this.apiBaseUrl}/geospatial/findmatchingaddresses?searchText=${n.SearchText}&suburbId=${n.SuburbId}`;fetch(t,this.createRequestObject("GET",null)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{this.eventObserver.broadcast(EventType.ADDRESSES_RETRIEVED,n)}).catch(n=>this.handleApiError(n))}sectionalTitleSearch(n){var t=`${this.apiBaseUrl}/geospatial/findmatchingsectionaltitles?searchText=${n.SearchText}&suburbId=${n.SuburbId}`;fetch(t,this.createRequestObject("GET",null)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{this.eventObserver.broadcast(EventType.SECTIONAL_TITLES_RETRIEVED,n)}).catch(n=>this.handleApiError(n))}getUserTags(){var n=`${this.apiBaseUrl}/user/tags`;fetch(n,this.createRequestObject("GET",null)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{this.eventObserver.broadcast(EventType.TAGS_LOADED,n)}).catch(n=>this.handleApiError(n))}saveUserTags(n){var t=`${this.apiBaseUrl}/user/savetags`;fetch(t,this.createRequestObject("POST",n)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{this.eventObserver.broadcast(EventType.TAGS_SAVED,n)}).catch(n=>this.handleApiError(n))}saveLocation(n){var t=`${this.apiBaseUrl}/geospatial/savelocation`;fetch(t,this.createRequestObject("POST",n)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{this.eventObserver.broadcast(EventType.LOCATION_SAVED,n)}).catch(n=>this.handleApiError(n))}getPlaces(){var n=`${this.apiBaseUrl}/geospatial/myplaces`;fetch(n,this.createRequestObject("GET",null)).then(function(n){if(!n.ok)throw Error(n.statusText);return n.json()}).then(n=>{var t=[];n.forEach(n=>{t.push(new GeoLocationModel(n.LocationId,n.FormattedAddress,n.Lat,n.Lng,n.What3Words,n.ProviderPayload,n.FriendlyName,null))});this.eventObserver.broadcast(EventType.PLACES_LOADED,t)}).catch(n=>this.handleApiError(n))}createRequestObject(n,t){var r=null,i;return t!=null&&(r=Array.isArray(t)?JSON.stringify(t):t.toString()),i=new Headers,i.append("Content-Type","application/json"),i.append("Authorization",`Bearer ${localStorage.getItem("access-token")}`),{method:n,body:r,headers:i}}handleApiError(n){console.log(n.message);n.message==="Unauthorized"&&(window.location="unauthorized.html")}}class MapViewController{constructor(n){this.$container=$("#map");this.eventBroker=n;this.mapProvider=null;this.userTagsCache=null;this.selectedLocation=null;this.init()}init(){this.attachHandlers();this.attachEventListeners();var n=localStorage.getItem("default-map");switch(n){case"google":this.mapProvider=new GoogleMapView(this,this.eventBroker);break;case"leaflet":this.mapProvider=new LeafletMapView(this,this.eventBroker);break;default:this.mapProvider=new GoogleMapView(this,this.eventBroker)}}attachHandlers(){this.$container.on("click",".saveGeoLayerButton",{},this.saveGeoLayerClickHandler.bind(this));this.$container.on("click",".deleteGeoLayerButton",{},this.deleteGeoLayerClickHandler.bind(this));this.$container.on("click",".saveLocationButton",{},this.saveLocationClickHandler.bind(this))}attachEventListeners(){this.eventBroker.subscribe(this.onGeoLayerSaving.bind(this),EventType.BEFORE_SAVE_LAYER);this.eventBroker.subscribe(this.onGeoLayerSaved.bind(this),EventType.LAYER_SAVED);this.eventBroker.subscribe(this.onLayerClick.bind(this),EventType.CLICK_LAYER);this.eventBroker.subscribe(this.onLayersShown.bind(this),EventType.AFTER_LAYERS_SHOWN);this.eventBroker.subscribe(this.onW3wRetrieved.bind(this),EventType.W3W_RETRIEVED);this.eventBroker.subscribe(this.onTagsLoaded.bind(this),EventType.TAGS_LOADED);this.eventBroker.subscribe(this.onTagsSaved.bind(this),EventType.TAGS_SAVED);this.eventBroker.subscribe(this.onLocationSaving.bind(this),EventType.BEFORE_SAVE_LOCATION);this.eventBroker.subscribe(this.onLocationSaved.bind(this),EventType.LOCATION_SAVED);this.eventBroker.subscribe(this.setLocation.bind(this),EventType.PLOT_LOCATION);this.eventBroker.subscribe(this.setLocation.bind(this),EventType.MARKER_CLICK)}saveGeoLayerClickHandler(){var n=$(".layerNameInput");if(n.val()===""){n.focus();return}var t=$(".layerLevelSelect").val(),i=$(".userTagSelector").children("option:selected").val(),r=new PublicTagModel(`Level ${t}`,t),u=new UserTagModel("user-tag",i),f=new GeoLayerModel(0,n.val(),"",r,u);this.eventBroker.broadcast(EventType.BEFORE_SAVE_LAYER,f)}saveLocationClickHandler(){this.eventBroker.broadcast(EventType.BEFORE_SAVE_LOCATION,{})}onTagsSaved(n){this.userTagsCache=n}onTagsLoaded(n){this.userTagsCache=n}deleteGeoLayerClickHandler(){Swal.fire({title:"Delete Layer?",text:"",type:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Yes"}).then(n=>{n.value&&($.blockUI({message:"<h2 class='loading-text'>Deleting Layer...<\/h2>"}),this.eventBroker.broadcast(EventType.BEFORE_DELETE_LAYER,{}))})}onGeoLayerSaving(){$.blockUI({message:"<h2 class='loading-text'>Saving...<\/h2>"});$(".saveGeoLayerButton").val("Saving...").attr("disabled","disabled")}onGeoLayerSaved(){$(".saveGeoLayerButton").val("Save").removeAttr("disabled");$.unblockUI()}onLocationSaving(){$.blockUI({message:"<h2 class='loading-text'>Saving...<\/h2>"});$(".saveLocationButton").val("Saving...").attr("disabled","disabled");var n=$(".locationNameInput").val();this.selectedLocation.FriendlyName=n;this.eventBroker.broadcast(EventType.SAVE_LOCATION,this.selectedLocation)}onLocationSaved(n){$(".saveLocationButton").val("Update Location").removeAttr("disabled");$.unblockUI();this.selectedLocation=new GeoLocationModel(n.LocationId,n.FormattedAddress,n.Lat,n.Lng,n.What3Words,n.ProviderPayload,n.FriendlyName,null)}onLayerClick(n){$(".layerNameInput").focus().val(n.LayerName?n.LayerName:"")}renderLayerLevelSetting(n){var i=localStorage.getItem("user-id"),r=!n.UserId||i==n.UserId,t=`<select class='layerLevelSelect' ${r?"":"disabled"}>`;return[{Id:"1",Name:"1"},{Id:"2",Name:"2"},{Id:"3",Name:"3"}].forEach(i=>{var r=i.Id==(n.PublicTag?n.PublicTag.TagValue:"")?"selected":"",u=`<option value='${i.Id}' ${r}>${i.Name}</option>`;t+=u}),t+"<\/select>"}getGeoLayerPopupContent(n){var i=localStorage.getItem("user-id"),t=!n.UserId||i==n.UserId;return`<div>
                    <span>
                        <div class='info-window-item-row'>
                            <label>Layer name: </label>
                            <input class='layerNameInput' type='text' value='${n.LayerName?n.LayerName:""}' ${t?"":"disabled"} />
                        </div>
                        <div class='info-window-item-row'>
                            <label>Priority level: </label>
                            ${this.renderLayerLevelSetting(n)}
                        </div>
                        <div class='info-window-item-row'>                                                      
                            ${this.renderUserTagOptions(n)}
                        </div>
                        <p />
                        ${t?"<input class='saveGeoLayerButton' type='button' value='Save' />                                              <input class='deleteGeoLayerButton' type='button' value='Delete Layer' />":""}
                    </span>
                </div>`}getGeolocationPopupContent(){var t=localStorage.getItem("user-id"),n=!this.selectedLocation.UserId||t==this.selectedLocation.UserId,i=this.selectedLocation.LocationId?"<input class='saveLocationButton' type='button' value='Update Location' />":"<input class='saveLocationButton' type='button' value='Save Location' />";return`<div class='info-window-geolocation'>
                    <span>
                        <div class='info-window-item-row'>
                            <label>Address: </label>
                            <input class='layerNameInput' type='text' value='${this.selectedLocation.FormattedAddress?this.selectedLocation.FormattedAddress:"n/a"}' readonly />
                        </div>
                        <div class='info-window-item-row'>
                            <label>Lat/Lng: </label>
                            <input type='text' value='${this.selectedLocation.Lat}, ${this.selectedLocation.Lng}' readonly />
                        </div>
                        <div class='info-window-item-row'>
                            <label>What3Words: </label>
                            <input id='w3wInput-${this.selectedLocation.uniqueIdentifier()}' type='text' value='${this.selectedLocation.What3Words?this.selectedLocation.What3Words:"Loading..."}' readonly />
                        </div>
                        <div class='info-window-item-row'>
                            <label>Place name: </label>
                            <input class='locationNameInput' type='text' value='${this.selectedLocation.FriendlyName?this.selectedLocation.FriendlyName:""}' ${n?"":"disabled"} />
                        </div>                       
                        <p />
                         ${n?i:""}
                    </span>
                </div>`}onW3wRetrieved(n){var t=$(`#w3wInput-${n.uniqueIdentifier()}`);t.length&&t.val(n.What3Words)}onLayersShown(){this.eventBroker.unsubscribe(this.onLayersShown.bind(this),EventType.AFTER_LAYERS_SHOWN);this.eventBroker.broadcast(EventType.TOGGLE_MENU,{Menu:"layersMenu"});$.unblockUI()}renderUserTagOptions(n){var u=localStorage.getItem("user-id"),i=!n.UserId||u==n.UserId,r,t;return i?(r=this.getUserTagValueFromLayer(n),t=$(`<select class='userTagSelector' ${i?"":"disabled"} />`),t.append($("<option><\/option>").attr("value","").text("")),this.userTagsCache.forEach(n=>{var i=n.TagValue===r?"selected":"";t.append($(`<option ${i}></option>`).attr("value",n.TagValue).text(n.TagValue))}),`<label>Tag: </label> ${t.prop("outerHTML")}`):""}getUserTagValueFromLayer(n){if(n.UserTag&&this.userTagsCache){var t=this.userTagsCache.find(t=>t.TagValue==n.UserTag.TagValue);return t?t.TagValue:""}return""}setLocation(n){this.selectedLocation=n}}class MenuViewController{constructor(n){this.eventBroker=n;this.settingsMenu=new SettingsMenuView(n);this.publicLayersMenu=new PublicLayersMenuView(n);this.privateLayersMenu=new PrivateLayersMenuView(n);this.locationFinderMenu=new LocationFinderMenuView(n);this.init()}init(){$.blockUI({message:"<h2 class='loading-text'>Loading...<\/h2>"});this.eventBroker.broadcast(EventType.LOAD_SETTINGS,{})}}class AddressSearchModel{constructor(n,t){this.SearchText=n;this.SuburbId=t}toString(){return JSON.stringify(this)}}class GeoLayerModel{constructor(n,t,i,r,u,f){this.Id=n;this.LayerName=t;this.Geojson=i;this.PublicTag=r;this.UserTag=u;this.UserId=f}toString(){return JSON.stringify(this)}}class GeoLocationModel{constructor(n,t,i,r,u,f,e,o){this.LocationId=n;this.FormattedAddress=t;this.Lat=i;this.Lng=r;this.What3Words=u;this.ProviderPayload=f;this.FriendlyName=e;this.UserTag=o}toString(){return JSON.stringify(this)}uniqueIdentifier(){return((this.Lat+90)*180+this.Lng+"").replace(".","")}}class LabelValueModel{constructor(n,t){this.label=n;this.value=t}}class UserSettingsModel{constructor(n){this.DefaultMapProvider=n}toString(){return JSON.stringify(this)}}class PublicTagModel{constructor(n,t){this.TagName=n;this.TagValue=t}toString(){return JSON.stringify(this)}}class UserTagModel{constructor(n,t){this.TagName=n;this.TagValue=t}toString(){return JSON.stringify(this)}}class PublicLayersMenuView{constructor(n){this.$container=$("#allLayersMenu");this.eventBroker=n;this.layersCache=null;this.render().attachHandlers().attachEventSubscribers()}render(){return this.$container.append(this.content()),this}attachHandlers(){$("#layersListContainer").on("click",".layerLink",n=>{var t=$(n.currentTarget).data("layerid");this.eventBroker.broadcast(EventType.SELECT_LAYER,new GeoLayerModel(t))});$("#layerLevelSelector").on("click",".showAllLayersCheckbox, .showLevel1Checkbox, .showLevel2Checkbox, .showLevel3Checkbox",n=>{$(n.currentTarget).hasClass("showAllLayersCheckbox")||$(".showAllLayersCheckbox").prop("checked",!1);var t=this.getSelectedLevels();this.eventBroker.broadcast(EventType.TOGGLE_PUBLIC_LAYERS,t)});return this}attachEventSubscribers(){return this.eventBroker.subscribe(this.onLayersLoaded.bind(this),EventType.LAYERS_LOADED),this.eventBroker.subscribe(this.onLayerSaved.bind(this),EventType.LAYER_SAVED),this.eventBroker.subscribe(this.toggleSelectableLayers.bind(this),EventType.TOGGLE_PUBLIC_LAYERS),this.eventBroker.subscribe(this.handleShowLayers.bind(this),EventType.TOGGLE_MENU),this.eventBroker.subscribe(this.onLayerDeleted.bind(this),EventType.LAYER_DELETED),this}getSelectedLevels(){var n=$(".showAllLayersCheckbox").is(":checked")?["1","2","3"]:[],t=$(".showLevel1Checkbox").is(":checked")?["1"]:[],i=$(".showLevel2Checkbox").is(":checked")?["2"]:[],r=$(".showLevel3Checkbox").is(":checked")?["3"]:[];return _.union([...n,...t,...i,...r])}onLayerSaved(n){var t=$("#layersListContainer").find(`[data-layerid='${n.Id}']`);if(t.length){t.text(n.LayerName);return}}onLayerDeleted(n){var t=$("#layersListContainer").find(`[data-layerid='${n.Id}']`);t.length&&t.remove()}onLayersLoaded(n){this.layersCache=n;this.updateLayersSelection(this.layersCache)}toggleSelectableLayers(n){var t=_.filter(this.layersCache,t=>_.includes(n,t.PublicTag.TagValue));this.updateLayersSelection(t)}updateLayersSelection(n){var t=$("#layersListContainer");t.empty();n.forEach(n=>{t.append(this.appendLayerLink(n))})}appendLayerLink(n){return $("<li>").append($("<a>").attr("href","#").addClass("layerLink").text(n.LayerName).attr("data-layerid",n.Id))}handleShowLayers(n){if(n.Menu==="allLayersMenu"){var t=this.getSelectedLevels();this.eventBroker.broadcast(EventType.TOGGLE_PUBLIC_LAYERS,t)}}content(){return`<div>
                    <div id='layerLevelSelector' class='menu-margins'>
                        <fieldset>
                            <legend>Layer Levels</legend>
                            Show all <input type="checkbox" class="showAllLayersCheckbox align-middle" checked> |
                            Level 1 <input type="checkbox" class="showLevel1Checkbox align-middle"> | 
                            Level 2 <input type="checkbox" class="showLevel2Checkbox align-middle"> | 
                            Level 3 <input type="checkbox" class="showLevel3Checkbox align-middle"> 
                        </fieldset>
                    </div>
                    <p />
                    <div class='menu-margins menu-content-vh'>
                        <ul id='layersListContainer' class='layer-item-list'></ul>
                    </div>
                </div>`}}class PrivateLayersMenuView{constructor(n){this.$container=$("#layersMenu");this.eventBroker=n;this.layersCache=null;this.userTagsCache=null;this.render().attachHandlers().attachEventSubscribers()}render(){return this.$container.append(this.content()),$(".user-tag-selector").select2({placeholder:"Select tags...",allowClear:!0}),this}attachHandlers(){$(".user-tag-selector").on("change.select2",()=>{var n=$(".user-tag-selector").select2("data"),t;n&&n.length?(t=[],n.forEach(n=>{t.push(new UserTagModel("user-tag",n.text))}),this.eventBroker.broadcast(EventType.TOGGLE_PRIVATE_LAYERS,t)):this.eventBroker.broadcast(EventType.TOGGLE_PRIVATE_LAYERS)});$("#privateLayersListContainer").on("click",".layerLink",n=>{var t=$(n.currentTarget).data("layerid");this.eventBroker.broadcast(EventType.SELECT_LAYER,new GeoLayerModel(t))});$("#manageTagsBtn").on("click",()=>{Swal.fire({title:"My Tags",confirmButtonColor:"#3085d6",confirmButtonText:"Save & Close",showCancelButton:!0,cancelButtonText:"Close",html:this.getManageTagsHtml(),onBeforeOpen:()=>{$("#tagEditorInput").tagEditor({initialTags:[..._.map(this.userTagsCache,n=>n.TagValue)],placeholder:"Enter tags ...",beforeTagSave:function(n,t,i,r,u){return r===""?u.toLowerCase().replace(/\s/g,""):!1}})}}).then(n=>{if(n.value){$.blockUI({message:"<h2 class='loading-text'>Saving Changes...<\/h2>"});var t=[],i=$("#tagEditorInput").tagEditor("getTags")[0].tags;i.forEach(n=>{t.push(new UserTagModel("user-tag",n))});this.eventBroker.broadcast(EventType.SAVE_TAGS,t)}})});return this}attachEventSubscribers(){return this.eventBroker.subscribe(this.onLayersLoaded.bind(this),EventType.LAYERS_LOADED),this.eventBroker.subscribe(this.handleShowLayers.bind(this),EventType.TOGGLE_MENU),this.eventBroker.subscribe(this.onTagsLoaded.bind(this),EventType.TAGS_LOADED),this.eventBroker.subscribe(this.onTagsSaved.bind(this),EventType.TAGS_SAVED),this.eventBroker.subscribe(this.onLayerDeleted.bind(this),EventType.LAYER_DELETED),this.eventBroker.subscribe(this.filterLayersByTags.bind(this),EventType.TOGGLE_PRIVATE_LAYERS),this}populateTagSelector(){var n=1;$(".user-tag-selector").html("");this.userTagsCache.forEach(t=>{var i=new Option(t.TagValue,n++,!1,!1);$(".user-tag-selector").append(i)})}onTagsSaved(n){this.userTagsCache=n;this.populateTagSelector();$.unblockUI()}handleShowLayers(n){n.Menu==="layersMenu"&&(this.eventBroker.broadcast(EventType.TOGGLE_PRIVATE_LAYERS),this.eventBroker.broadcast(EventType.LOAD_USER_TAGS,{}))}onLayersLoaded(n){this.layersCache=n;this.updateLayersSelection(this.layersCache)}onTagsLoaded(n){this.userTagsCache=n;this.populateTagSelector()}updateLayersSelection(n){var i=localStorage.getItem("user-id"),t=$("#privateLayersListContainer");t.empty();n.forEach(n=>{var r=!n.UserId||i==n.UserId;r&&t.append(this.appendLayerLink(n))})}appendLayerLink(n){return $("<li>").append($("<a>").attr("href","#").addClass("layerLink").text(n.LayerName).attr("data-layerid",n.Id))}onLayerDeleted(n){var t=$("#privateLayersListContainer").find(`[data-layerid='${n.Id}']`);t.length&&t.remove()}filterLayersByTags(n){if(n&&n.length){var t=_.filter(this.layersCache,t=>t.UserTag&&_.some(n,n=>n.TagValue!==""&&n.TagValue==t.UserTag.TagValue));this.updateLayersSelection(t)}else this.updateLayersSelection(this.layersCache)}content(){return`<div>  
                    <div class='menu-margins'>
                        <input id='manageTagsBtn' type='button' value='My Tags' />
                        <p />
                        <select class="user-tag-selector" name="usertags" multiple="multiple" >
                        </select>
                    </div>
                    <p />
                    <div class='menu-margins menu-content-vh'>
                        <ul id='privateLayersListContainer' class='layer-item-list'></ul>
                    </div>
                </div>`}getManageTagsHtml(){return"<textarea id='tagEditorInput' rows='4' cols='50' />"}}class GoogleMapView{constructor(n,t){this.viewController=n;this.eventBroker=t;this.map=null;this.selectedLayer=null;this.layerCache=null;this.infowindow=null;this.addFeatureEventHandlerInstance=null;this.locationCache=null;this.markerCache=[];this.init()}init(){this.attachEventListeners().createMapScript().createMapCallback()}attachEventListeners(){return this.eventBroker.subscribe(this.onLayersLoaded.bind(this),EventType.LAYERS_LOADED),this.eventBroker.subscribe(this.onSaveLayer.bind(this),EventType.BEFORE_SAVE_LAYER),this.eventBroker.subscribe(this.onDeleteLayer.bind(this),EventType.BEFORE_DELETE_LAYER),this.eventBroker.subscribe(this.onLayerDeleted.bind(this),EventType.LAYER_DELETED),this.eventBroker.subscribe(this.onLayerSaved.bind(this),EventType.LAYER_SAVED),this.eventBroker.subscribe(this.afterLayersLoaded.bind(this),EventType.AFTER_LAYERS_SHOWN),this.eventBroker.subscribe(this.onSelectLayer.bind(this),EventType.SELECT_LAYER),this.eventBroker.subscribe(this.togglePublicLayers.bind(this),EventType.TOGGLE_PUBLIC_LAYERS),this.eventBroker.subscribe(this.togglePrivateLayers.bind(this),EventType.TOGGLE_PRIVATE_LAYERS),this.eventBroker.subscribe(this.plotLocationMarker.bind(this),EventType.PLOT_LOCATION),this.eventBroker.subscribe(this.handleSwitchMenus.bind(this),EventType.TOGGLE_MENU,Ordinality.Highest),this.eventBroker.subscribe(this.onPlacesLoaded.bind(this),EventType.PLACES_LOADED),this.eventBroker.subscribe(this.handleFindLocationById.bind(this),EventType.FIND_LOCATION_BY_PLACE_ID),this}createMapScript(){var n=document.createElement("script");return n.src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDQ3eXd26fw0zaOG95D4u5vgki7asjfY4I&callback=initGoogleMap&libraries=drawing,places",document.body.appendChild(n),this}createMapCallback(){return window.initGoogleMap=()=>{try{const t={latitude:-33.945282,longitude:18.597752};this.map=new google.maps.Map(document.getElementById("map"),{mapTypeId:"roadmap",center:{lat:t.latitude,lng:t.longitude},zoom:10});this.enableDrawing();var n=this;this.map.data.addListener("click",t=>{n.handleLayerClick(t.feature),n.handleDeleteVertex(t)});this.map.data.setStyle(n=>{var t=n.getProperty("LayerColour");return{fillColor:t,fillOpacity:.7,strokeWeight:1}});this.infowindow=new google.maps.InfoWindow;this.eventBroker.broadcast(EventType.MAP_LOADED,{})}catch(t){console.log(t)}},this}enableDrawing(){var n=new google.maps.drawing.DrawingManager({drawingControlOptions:{position:google.maps.ControlPosition.TOP_RIGHT,drawingModes:["polygon"]},polygonOptions:{fillColor:"red",strokeWeight:1}}),t;n.setMap(this.map);t=this;google.maps.event.addListener(n,"polygoncomplete",function(i){var f=new Wkt.Wkt,e=f.fromObject(i),o=JSON.stringify({type:"Feature",properties:{Id:0},geometry:e.toJson()}),s=localStorage.getItem("user-id"),r=new GeoLayerModel(0,"",o,null,null,s),u;t.layerCache.push(r);u=JSON.parse(r.Geojson);t.map.data.addGeoJson(u,{idPropertyName:"Id"});n.setDrawingMode(null);i.setMap(null)})}onLayersLoaded(n){this.layerCache=n;this.layerCache.forEach(n=>{var t=JSON.parse(n.Geojson);this.map.data.addGeoJson(t,{idPropertyName:"Id"})});this.eventBroker.broadcast(EventType.AFTER_LAYERS_SHOWN,{})}togglePublicLayers(n){this.unselectActiveLayer();this.map.data.forEach(n=>{this.map.data.remove(n)});this.addFeatureEventHandlerInstance.remove();this.addFeatureEventHandlerInstance=null;var t=_.filter(this.layerCache,t=>_.includes(n,t.PublicTag.TagValue));t.forEach(n=>{var t=JSON.parse(n.Geojson);this.map.data.addGeoJson(t,{idPropertyName:"Id"})});this.eventBroker.broadcast(EventType.AFTER_LAYERS_SHOWN,{})}togglePrivateLayers(n){this.unselectActiveLayer();this.map.data.forEach(n=>{this.map.data.remove(n)});this.addFeatureEventHandlerInstance&&this.addFeatureEventHandlerInstance.remove();this.addFeatureEventHandlerInstance=null;var t=localStorage.getItem("user-id"),i=_.filter(this.layerCache,i=>{var u=!i.UserId||t==i.UserId,r=!0;return n&&n.length&&(r=i.UserTag&&_.some(n,n=>n.TagValue!==""&&n.TagValue==i.UserTag.TagValue)),u&&r});i.forEach(n=>{var t=JSON.parse(n.Geojson);this.map.data.addGeoJson(t,{idPropertyName:"Id"})});this.eventBroker.broadcast(EventType.AFTER_LAYERS_SHOWN,{})}afterLayersLoaded(){var n=this;this.addFeatureEventHandlerInstance=this.map.data.addListener("addfeature",t=>{n.handleLayerClick(t.feature)})}unselectActiveLayer(){this.infowindow&&this.infowindow.close();this.selectedLayer&&(this.map.data.overrideStyle(this.selectedLayer,{editable:!1}),this.selectedLayer.getProperty("Id")==0&&(this.map.data.remove(this.selectedLayer),_.remove(this.layerCache,n=>n.Id==0)),this.selectedLayer=null)}handleLayerClick(n){var i,t,r,u;if(this.unselectActiveLayer(),this.selectedLayer=n,i=this.selectedLayer.getProperty("Id"),t=this.layerCache.find(n=>n.Id==i),t){r=localStorage.getItem("user-id");u=!t.UserId||r==t.UserId;this.map.data.overrideStyle(this.selectedLayer,{editable:u});var f=new GeoLayerModel(t.Id,t.LayerName,"",t.PublicTag,t.UserTag,t.UserId),e=this.viewController.getGeoLayerPopupContent(f),o=n.getGeometry().getAt(0).getArray(),s=this.calcCentroid(o);this.infowindow.setContent(e);this.infowindow.setPosition(s);this.infowindow.open(this.map);this.eventBroker.broadcast(EventType.CLICK_LAYER,{LayerName:f.LayerName})}}onSaveLayer(n){this.selectedLayer.toGeoJson(t=>{var f=JSON.stringify(t),i=this.selectedLayer.getProperty("Id"),r=this.layerCache.find(n=>n.Id==i),u;r.Geojson=f;u=new GeoLayerModel(i,n.LayerName,r.Geojson,n.PublicTag,n.UserTag);this.eventBroker.broadcast(EventType.SAVE_LAYER,u)})}onDeleteLayer(){var n=this.selectedLayer.getProperty("Id"),t=new GeoLayerModel(n,"","",null,null);this.eventBroker.broadcast(EventType.DELETE_LAYER,t)}onLayerDeleted(n){this.infowindow&&this.infowindow.close();this.map.data.remove(this.selectedLayer);_.remove(this.layerCache,t=>t.Id===n.Id);$.unblockUI()}onLayerSaved(n){var t=this.layerCache.find(t=>t.Id==n.Id),i,r;t||(t=this.layerCache.find(n=>n.Id==0));i=JSON.parse(n.Geojson);this.selectedLayer.setProperty("Id",n.Id);r=i.properties.LayerColour;this.map.data.overrideStyle(this.selectedLayer,{fillColor:r,fillOpacity:.7,strokeWeight:1});t.Id=n.Id;t.LayerName=n.LayerName;t.PublicTag=n.PublicTag;t.UserTag=n.UserTag;t.Geojson=n.Geojson;t.UserId=n.UserId}calcCentroid(n){var t=new google.maps.LatLngBounds;return n.forEach(n=>{t.extend(n)}),t.getCenter()}handleDeleteVertex(n){var t,i,r;n.latLng&&(t=[],n.feature.getGeometry().forEachLatLng(function(i){i.lat()==n.latLng.lat()&&i.lng()==n.latLng.lng()||t.push(i)}),i=new google.maps.Data.LinearRing(t),r=new google.maps.Data.Polygon([i]),n.feature.setGeometry(r))}onSelectLayer(n){var t=this.map;t.data.forEach(i=>{var f=i.getProperty("Id"),r,u;f==n.Id&&(google.maps.event.trigger(t.data,"click",{feature:i}),r=i.getGeometry().getAt(0).getArray(),u=this.calcCentroid(r),t.panTo(u))})}plotLocationMarker(n){var r,t,u,i;$.unblockUI();r=new google.maps.LatLng(n.Lat,n.Lng);t=new google.maps.Marker({position:r,map:this.map});t.LocationObject=n;this.markerCache.push(t);u=this.viewController.getGeolocationPopupContent(n);i=this;t.addListener("click",function(){i.eventBroker.broadcast(EventType.MARKER_CLICK,this.LocationObject);i.infowindow.close();i.infowindow.setContent(i.viewController.getGeolocationPopupContent());i.infowindow.open(i.map,t)});this.map.panTo(t.getPosition());this.infowindow.setContent(u);this.infowindow.open(this.map,t);n.What3Words||this.eventBroker.broadcast(EventType.FIND_3_WORDS,n)}handleSwitchMenus(){this.unselectActiveLayer()}plotLocationMarker2(n){var r=new google.maps.LatLng(n.Lat,n.Lng),i=new google.maps.Marker({position:r,map:this.map}),t;i.LocationObject=n;this.markerCache.push(i);t=this;i.addListener("click",function(){t.eventBroker.broadcast(EventType.MARKER_CLICK,this.LocationObject);t.infowindow.close();t.infowindow.setContent(t.viewController.getGeolocationPopupContent());t.infowindow.open(t.map,i);this.LocationObject.What3Words||t.eventBroker.broadcast(EventType.FIND_3_WORDS,this.LocationObject)})}onPlacesLoaded(n){this.locationCache=n;this.locationCache.forEach(n=>{this.plotLocationMarker2(n)})}handleFindLocationById(n){var i=JSON.parse(n.ProviderPayload),t=!1;this.locationCache.forEach(n=>{var r=null;try{r=JSON.parse(n.ProviderPayload)}catch(u){}r&&r.place_id===i.place_id&&(t=!0,this.markerCache.forEach(t=>{t.LocationObject==n&&new google.maps.event.trigger(t,"click")}))});t||this.eventBroker.broadcast(EventType.PLOT_LOCATION,n)}}class LeafletMapView{constructor(n,t){this.viewController=n;this.eventBroker=t;this.map=null;this.activeLayer=null;this.drawnItems=null;this.layersCache=null;this.init()}init(){this.createMap().attachEventListeners()}createMap(){try{const n={latitude:-33.945282,longitude:18.597752};this.map=L.map("map",{center:[n.latitude,n.longitude],zoom:10,dragging:!0});L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGFuaWUzMzAiLCJhIjoiY2pxeTlqc242MDE5cTQzcnpubHlyeTJucyJ9.Omq9E98-rSVM2EWccOdFtg",{attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap<\/a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA<\/a>, Imagery © <a href="https://www.mapbox.com/">Mapbox<\/a>',maxZoom:30,id:"mapbox.streets",accessToken:"pk.eyJ1IjoiZGFuaWUzMzAiLCJhIjoiY2pxeTlqc242MDE5cTQzcnpubHlyeTJucyJ9.Omq9E98-rSVM2EWccOdFtg"}).addTo(this.map);this.enableDrawing();this.eventBroker.broadcast(EventType.MAP_LOADED,{})}catch(n){console.log(n)}return this}attachEventListeners(){return this.eventBroker.subscribe(this.onSaveLayer.bind(this),EventType.BEFORE_SAVE_LAYER),this.eventBroker.subscribe(this.onDeleteLayer.bind(this),EventType.BEFORE_DELETE_LAYER),this.eventBroker.subscribe(this.onLayerDeleted.bind(this),EventType.LAYER_DELETED),this.eventBroker.subscribe(this.onLayerSaved.bind(this),EventType.LAYER_SAVED),this.eventBroker.subscribe(this.onLayersLoaded.bind(this),EventType.LAYERS_LOADED),this.eventBroker.subscribe(this.onSelectLayer.bind(this),EventType.SELECT_LAYER),this.eventBroker.subscribe(this.togglePublicLayers.bind(this),EventType.TOGGLE_PUBLIC_LAYERS),this.eventBroker.subscribe(this.togglePrivateLayers.bind(this),EventType.TOGGLE_PRIVATE_LAYERS),this.eventBroker.subscribe(this.handleSwitchMenus.bind(this),EventType.TOGGLE_MENU,Ordinality.Highest),this}enableDrawing(){var t,n;this.map.options.drawControl=!0;this.drawnItems=new L.FeatureGroup;this.map.addLayer(this.drawnItems);t=new L.Control.Draw({position:"topright",draw:{polygon:{shapeOptions:{color:"red",weight:1}},rectangle:!1,circle:!1,polyline:!1,marker:!1,circlemarker:!1}});this.map.addControl(t);n=this;this.map.on(L.Draw.Event.CREATED,function(t){var r=t.layer,i=r.feature=r.feature||{},u,f;i.type=i.type||"Feature";i.properties=i.properties||{};i.properties.Id=0;u=localStorage.getItem("user-id");f=new GeoLayerModel(0,"","",null,null,u);n.layersCache.push(f);n.drawnItems.addLayer(t.layer);t.layer.on("click",()=>{n.handleLayerClick(t.layer)}).fireEvent("click")});return this}onSaveLayer(n){var t=this.activeLayer.toGeoJSON(),i=t.properties.Id||0;this.eventBroker.broadcast(EventType.SAVE_LAYER,new GeoLayerModel(i,n.LayerName,t,n.PublicTag,n.UserTag))}onDeleteLayer(){var n=this.activeLayer.toGeoJSON(),t=n.properties.Id||0;this.eventBroker.broadcast(EventType.DELETE_LAYER,new GeoLayerModel(t,"","",null,null))}onLayerDeleted(n){this.unselectActiveLayer();var t=this;this.map.eachLayer(function(i){if(typeof i.toGeoJSON!="undefined"){var r=i.toGeoJSON();_.has(r,"properties")&&r.properties.Id==n.Id&&t.map.removeLayer(i)}});_.remove(this.layersCache,t=>t.Id===n.Id);$.unblockUI()}onLayerSaved(n){var t=this.layersCache.find(t=>t.Id==n.Id);t||(t=this.layersCache.find(n=>n.Id==0));this.activeLayer.feature.properties.Id=n.Id;this.activeLayer.setStyle({color:JSON.parse(n.Geojson).properties.LayerColour,weight:1,fillOpacity:.7});t.Id=n.Id;t.LayerName=n.LayerName;t.PublicTag=n.PublicTag;t.UserTag=n.UserTag;t.Geojson=n.Geojson;t.UserId=n.UserId}togglePublicLayers(n){var t,i;this.unselectActiveLayer();t=this;this.map.eachLayer(function(n){if(typeof n.toGeoJSON!="undefined"){var i=n.toGeoJSON();_.has(i,"properties")&&t.map.removeLayer(n)}});i=_.filter(this.layersCache,t=>_.includes(n,t.PublicTag.TagValue));i.forEach(n=>{L.geoJson(JSON.parse(n.Geojson),{onEachFeature:function(n,i){var r=n.properties.LayerColour;i.setStyle({color:r,weight:1,fillOpacity:.7});i.on("click",()=>t.handleLayerClick(i));t.drawnItems.addLayer(i)}})});this.eventBroker.broadcast(EventType.AFTER_LAYERS_SHOWN,{})}togglePrivateLayers(n){var t,i,r;this.unselectActiveLayer();t=this;this.map.eachLayer(function(n){if(typeof n.toGeoJSON!="undefined"){var i=n.toGeoJSON();_.has(i,"properties")&&t.map.removeLayer(n)}});i=localStorage.getItem("user-id");r=_.filter(this.layersCache,t=>{var u=!t.UserId||i==t.UserId,r=!0;return n&&n.length&&(r=t.UserTag&&_.some(n,n=>n.TagValue!==""&&n.TagValue==t.UserTag.TagValue)),u&&r});r.forEach(n=>{L.geoJson(JSON.parse(n.Geojson),{onEachFeature:function(n,i){var r=n.properties.LayerColour;i.setStyle({color:r,weight:1,fillOpacity:.7});i.on("click",()=>t.handleLayerClick(i));t.drawnItems.addLayer(i)}})});this.eventBroker.broadcast(EventType.AFTER_LAYERS_SHOWN,{})}unselectActiveLayer(){if(this.activeLayer){this.activeLayer.editing.disable();var n=this.activeLayer.toGeoJSON();n.properties.Id==0&&(this.map.removeLayer(this.activeLayer),_.remove(this.layersCache,n=>n.Id==0));this.activeLayer=null}}handleLayerClick(n){this.unselectActiveLayer();this.activeLayer=n;var i=this.activeLayer.toGeoJSON(),t=this.layersCache.find(n=>n.Id==i.properties.Id),r=localStorage.getItem("user-id"),u=!t||!t.UserId||r==t.UserId;u&&this.activeLayer.editing.enable();t||(t=this.layersCache.find(n=>n.Id==0));this.activeLayer.bindPopup(this.viewController.getGeoLayerPopupContent(t)).openPopup();this.eventBroker.broadcast(EventType.CLICK_LAYER,t)}onLayersLoaded(n){this.layersCache=n;var t=this;this.layersCache.forEach(n=>{L.geoJson(JSON.parse(n.Geojson),{onEachFeature:function(n,i){var r=n.properties.LayerColour;i.setStyle({color:r,weight:1,fillOpacity:.7});i.on("click",()=>t.handleLayerClick(i));t.drawnItems.addLayer(i)}})});this.eventBroker.broadcast(EventType.AFTER_LAYERS_SHOWN,{})}onSelectLayer(n){var t=this.map;t.eachLayer(function(i){var r,u;typeof i.toGeoJSON!="undefined"&&(r=i.toGeoJSON(),_.has(r,"properties")&&r.properties.Id==n.Id&&(i.fireEvent("click"),u=i.getPopup().getLatLng(),t.panTo(u)))})}handleSwitchMenus(){this.unselectActiveLayer()}}class LocationFinderMenuView{constructor(n){this.$container=$("#locationFinderMenu");this.eventBroker=n;this.suburbsAutocompleteCallback=null;this.addressAutoCompleteCallback=null;this.sectionalTitleAutoCompleteCallback=null;this.attachHandlers().attachEventSubscribers()}render(){this.$container.append(this.content());var n=this,t=0;return $("#localSuburbSearchTextField").autocomplete({minLength:3,delay:500,source:function(t,i){var r=new AddressSearchModel(t.term,0);n.eventBroker.broadcast(EventType.SEARCH_SUBURBS,r);n.suburbsAutocompleteCallback=i},select:function(n,i){n.preventDefault();$(this).val(i.item.label);t=i.item.value;$("#localAddressSearchTextField").val("").prop("disabled",!1);$("#localSectionalTitleSearchTextField").val("").prop("disabled",!1)},change:function(n,t){t.item==null&&($("#localAddressSearchTextField").val("").prop("disabled",!0),$("#localSectionalTitleSearchTextField").val("").prop("disabled",!0))}}),$("#localAddressSearchTextField").autocomplete({minLength:3,delay:500,source:function(i,r){var u=new AddressSearchModel(i.term,t);n.eventBroker.broadcast(EventType.SEARCH_ADDRESSES,u);n.addressAutoCompleteCallback=r},select:function(t,i){$.blockUI({message:"<h2 class='loading-text'>Finding Location...<\/h2>"});t.preventDefault();$(this).val(i.item.label);var r=new GeoLocationModel(i.item.value,"",0,0,null,null,null);n.eventBroker.broadcast(EventType.FIND_LOCATION,r)}}),$("#localSectionalTitleSearchTextField").autocomplete({minLength:3,delay:500,source:function(i,r){var u=new AddressSearchModel(i.term,t);n.eventBroker.broadcast(EventType.SEARCH_SECTIONAL_TITLES,u);n.sectionalTitleAutoCompleteCallback=r},select:function(t,i){$.blockUI({message:"<h2 class='loading-text'>Finding Location...<\/h2>"});t.preventDefault();$(this).val(i.item.label);var r=new GeoLocationModel(i.item.value,"",0,0,null,null,null);n.eventBroker.broadcast(EventType.FIND_LOCATION,r)}}),this}attachHandlers(){$("#locationFinderMenu").on("keyup","#w3wSearchField",n=>{if(n.keyCode==13){var t=$("#w3wSearchField").val();t&&this.handleSearchW3W(t)}});return this}attachEventSubscribers(){return this.eventBroker.subscribe(this.onMapLoaded.bind(this),EventType.MAP_LOADED),this.eventBroker.subscribe(this.onSuburbsRetrieved.bind(this),EventType.SUBURBS_RETRIEVED),this.eventBroker.subscribe(this.onAddressesRetrieved.bind(this),EventType.ADDRESSES_RETRIEVED),this.eventBroker.subscribe(this.onSectionalTitlesRetrieved.bind(this),EventType.SECTIONAL_TITLES_RETRIEVED),this}onMapLoaded(){var t=localStorage.getItem("default-map"),n;t==="google"?(this.render(),n=new google.maps.places.Autocomplete(document.getElementById("googleSearchTextField"),{strictBounds:!0,componentRestrictions:{country:"za"}}),n.setFields(["address_components","geometry","formatted_address","place_id"]),n.addListener("place_changed",()=>this.handleGoogleLocationSelect(n))):this.$container.empty().append("<div class='menu-margins'>Please switch to Google Maps view to use this function<\/div>")}handleGoogleLocationSelect(n){var t=n.getPlace(),i=JSON.stringify(t),r=new GeoLocationModel(0,t.formatted_address,t.geometry.location.lat(),t.geometry.location.lng(),null,i,null);this.eventBroker.broadcast(EventType.FIND_LOCATION_BY_PLACE_ID,r)}handleSearchW3W(n){$.blockUI({message:"<h2 class='loading-text'>Finding Location...<\/h2>"});this.eventBroker.broadcast(EventType.FIND_LOCATION,new GeoLocationModel(0,null,0,0,n,null,null))}onSuburbsRetrieved(n){this.suburbsAutocompleteCallback(n)}onAddressesRetrieved(n){this.addressAutoCompleteCallback(n)}onSectionalTitlesRetrieved(n){this.sectionalTitleAutoCompleteCallback(n)}content(){return`<div class='menu-margins'>                                        
                    <p />
                    <img src='../../img/google_logo.jpg' class='menu-search-logo' />
                    <input id='googleSearchTextField' type='search' class='search-box' />
                    <p />                    
                </div>`}}class SettingsMenuView{constructor(n){this.googleIdentifier="google";this.leafletIdentifier="leaflet";this.$container=$("#settingsMenu");this.eventBroker=n;this.render().attachHandlers().attachEventSubscribers()}render(){this.$container.append(this.content());var n=localStorage.getItem("default-map");return $("#mapProviderToggle").val(n),this}attachEventSubscribers(){return this.eventBroker.subscribe(this.onSaveSettings.bind(this),EventType.BEFORE_SAVE_SETTINGS),this.eventBroker.subscribe(this.onSettingsSaved.bind(this),EventType.SETTINGS_SAVED),this}attachHandlers(){return $("#saveSettingsButton").click(()=>this.eventBroker.broadcast(EventType.BEFORE_SAVE_SETTINGS,{})),this}onSaveSettings(){$("#saveSettingsButton").val("Saving...").attr("disabled","disabled");var n=$("#mapProviderToggle").val(),t=new UserSettingsModel(n);this.eventBroker.broadcast(EventType.SAVE_SETTINGS,t)}onSettingsSaved(){$("#saveSettingsButton").val("Save Changes").removeAttr("disabled")}content(){return`<div class='menu-margins'>
                    <span>
                        <label>Default map provider: </label>
                        <select id='mapProviderToggle'>
                            <option value='leaflet'>Leaflet</option>
                            <option value='google'>Google Maps</option>
                        </select>
                    </span>
                    <p />
                    <span>
                        <input id='saveSettingsButton' type='button' value='Save Changes' />
                    </span>
                </div>`}}app=app||{},function(n){$(function(){var t=new EventBroker;new ApiController(t);new MenuViewController(t);new MapViewController(t);n.createMenu(t)});n.createMenu=n=>{$("#myLayersText").text(`My Layers (${localStorage.getItem("user-friendly-name")})`),$(".slide-menu").slidemenu({EventBroker:n})}}(app);app=app||{};app.API_BASE_URL="http://localhost:8000/api";app.LOGIN_URL="http://localhost:8000/api/user/login";app.DEFAULT_PAGE="index.html";const Ordinality={Highest:1},EventType={BEFORE_SAVE_LAYER:"BEFORE_SAVE_LAYER",SAVE_LAYER:"SAVE_LAYER",LAYER_SAVED:"LAYER_SAVED",CLICK_LAYER:"CLICK_LAYER",SELECT_LAYER:"SELECT_LAYER",BEFORE_DELETE_LAYER:"BEFORE_DELETE_LAYER",DELETE_LAYER:"DELETE_LAYER",LAYER_DELETED:"LAYER_DELETED",MAP_LOADED:"MAP_LOADED",PLOT_LOCATION:"PLOT_LOCATION",BEFORE_SAVE_LOCATION:"BEFORE_SAVE_LOCATION",LOCATION_SAVED:"LOCATION_SAVED",SAVE_LOCATION:"SAVE_LOCATION",PLACES_LOADED:"PLACES_LOADED",MARKER_CLICK:"MARKER_CLICK",FIND_LOCATION_BY_PLACE_ID:"FIND_LOCATION_BY_PLACE_ID",LAYERS_LOADED:"LAYERS_LOADED",AFTER_LAYERS_SHOWN:"AFTER_LAYERS_SHOWN",TOGGLE_PUBLIC_LAYERS:"TOGGLE_PUBLIC_LAYERS",TOGGLE_PRIVATE_LAYERS:"TOGGLE_PRIVATE_LAYERS",TOGGLE_MENU:"TOGGLE_MENU",LOAD_USER_TAGS:"LOAD_USER_TAGS",TAGS_LOADED:"TAGS_LOADED",SAVE_TAGS:"SAVE_TAGS",TAGS_SAVED:"TAGS_SAVED",BEFORE_SAVE_SETTINGS:"BEFORE_SAVE_SETTINGS",SAVE_SETTINGS:"SAVE_SETTINGS",SETTINGS_SAVED:"SETTINGS_SAVED",LOAD_SETTINGS:"LOAD_SETTINGS",FIND_LOCATION:"FIND_LOCATION",SEARCH_SUBURBS:"SEARCH_SUBURBS",SUBURBS_RETRIEVED:"SUBURBS_RETRIEVED",SEARCH_ADDRESSES:"SEARCH_ADDRESSES",ADDRESSES_RETRIEVED:"ADDRESSES_RETRIEVED",SEARCH_SECTIONAL_TITLES:"SEARCH_SECTIONAL_TITLES",SECTIONAL_TITLES_RETRIEVED:"SECTIONAL_TITLES_RETRIEVED",FIND_3_WORDS:"FIND_3_WORDS",W3W_RETRIEVED:"W3W_RETRIEVED"};class EventBroker{constructor(){this.subscribers={BEFORE_SAVE_LAYER:[],SAVE_LAYER:[],LAYER_SAVED:[],CLICK_LAYER:[],SELECT_LAYER:[],BEFORE_DELETE_LAYER:[],DELETE_LAYER:[],LAYER_DELETED:[],MAP_LOADED:[],PLOT_LOCATION:[],BEFORE_SAVE_LOCATION:[],LOCATION_SAVED:[],SAVE_LOCATION:[],PLACES_LOADED:[],MARKER_CLICK:[],FIND_LOCATION_BY_PLACE_ID:[],LAYERS_LOADED:[],AFTER_LAYERS_SHOWN:[],TOGGLE_PUBLIC_LAYERS:[],TOGGLE_PRIVATE_LAYERS:[],TOGGLE_MENU:[],LOAD_USER_TAGS:[],TAGS_LOADED:[],SAVE_TAGS:[],TAGS_SAVED:[],BEFORE_SAVE_SETTINGS:[],SAVE_SETTINGS:[],SETTINGS_SAVED:[],LOAD_SETTINGS:[],FIND_LOCATION:[],SEARCH_SUBURBS:[],SUBURBS_RETRIEVED:[],SEARCH_ADDRESSES:[],ADDRESSES_RETRIEVED:[],SEARCH_SECTIONAL_TITLES:[],SECTIONAL_TITLES_RETRIEVED:[],FIND_3_WORDS:[],W3W_RETRIEVED:[]}}subscribe(n,t,i){var r=this.subscribers[t];i&&i===Ordinality.Highest?r.unshift(n):r.push(n)}unsubscribe(n,t){for(var r=this.subscribers[t],i=0;i<r.length;i++)r[i].name===n.name&&r.splice(i,1)}broadcast(n,t){var r,i;for(console.log(`${n} event broadcast by EventBroker`),r=this.subscribers[n],i=0;i<r.length;i++)r[i](t)}}